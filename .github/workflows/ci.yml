name: Enterprise CI/CD Pipeline

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  schedule:
    - cron: '0 2 * * 1'  # Weekly security scan
  workflow_dispatch:

env:
  PYTHON_VERSION: '3.11'
  CACHE_VERSION: v1

permissions:
  contents: read
  security-events: write
  actions: read
  checks: write
  pull-requests: write

jobs:
  security-scan:
    name: Security Analysis
    runs-on: ubuntu-latest
    if: github.event_name != 'pull_request' || github.event.pull_request.head.repo.full_name == github.repository
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
    
    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  code-quality:
    name: Code Quality & Security
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        python-version: ['3.9', '3.10', '3.11', '3.12']
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
        cache: 'pip'
        cache-dependency-path: 'requirements.txt'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip setuptools wheel
        pip install -r requirements.txt
        pip install pytest flake8 black bandit safety mypy pylint coverage
    
    - name: Security check with bandit
      run: |
        bandit -r . -f json -o bandit-report.json || true
        bandit -r . --severity-level medium
    
    - name: Dependency security check
      run: |
        safety check --json --output safety-report.json || true
        safety check
    
    - name: Lint with flake8
      run: |
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    
    - name: Type checking with mypy
      run: |
        mypy . --ignore-missing-imports || true
    
    - name: Code analysis with pylint
      run: |
        pylint **/*.py --exit-zero
    
    - name: Format check with black
      run: |
        black --check --diff .
    
    - name: Run tests with coverage
      run: |
        coverage run -m pytest -v --tb=short
        coverage report --show-missing
        coverage xml
      continue-on-error: true
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v4
      if: matrix.python-version == '3.11'
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

  generate-stats:
    name: Generate GitHub Stats
    runs-on: ubuntu-latest
    needs: [security-scan, code-quality]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        fetch-depth: 0
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Generate stats
      env:
        ACCESS_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        GITHUB_ACTOR: ${{ github.repository_owner }}
        EXCLUDED: 'repo-private'
        EXCLUDED_LANGS: 'html,css'
        EXCLUDE_FORKED_REPOS: 'true'
      run: |
        python generate_images.py
    
    - name: Commit and push changes
      run: |
        git config --local user.email "25517637+uldyssian-sh@users.noreply.github.com"
        git config --local user.name "uldyssian-sh LT"
        git add generated/
        git diff --staged --quiet || git commit -m "ü§ñ Auto-update GitHub stats [skip ci]"
        git push

  build-validation:
    name: Build Validation
    runs-on: ubuntu-latest
    needs: [code-quality]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Validate package structure
      run: |
        python -c "import github_stats; import generate_images; print('‚úÖ All modules import successfully')"
    
    - name: Check for sensitive data
      run: |
        if grep -r "lubomir" . --exclude-dir=.git --exclude="*.md" --exclude="*.yml" --exclude="*.yaml"; then
          echo "‚ùå Found sensitive data in code"
          exit 1
        fi
        echo "‚úÖ No sensitive data found"

  all-checks:
    name: All Checks Passed
    runs-on: ubuntu-latest
    needs: [security-scan, code-quality, build-validation]
    if: always()
    
    steps:
    - name: Check all jobs status
      run: |
        if [[ "${{ needs.security-scan.result }}" == "success" && 
              "${{ needs.code-quality.result }}" == "success" && 
              "${{ needs.build-validation.result }}" == "success" ]]; then
          echo "‚úÖ All checks have passed"
        else
          echo "‚ùå Some checks failed"
          exit 1
        fi
